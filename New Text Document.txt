import Foundation

var semaphore = DispatchSemaphore (value: 0)

let parameters = [
  [
    "key": "uservisibility[username]",
    "value": "Justen50",
    "type": "text"
  ],
  [
    "key": "uservisibility[profilePic]",
    "value": "false",
    "type": "text"
  ],
  [
    "key": "uservisibility[chat]",
    "value": "true",
    "type": "text"
  ],
  [
    "key": "uservisibility[location]",
    "value": "true",
    "type": "text"
  ],
  [
    "key": "uservisibility[gender]",
    "value": "true",
    "type": "text"
  ],
  [
    "key": "uservisibility[phoneCall]",
    "value": "false",
    "type": "text"
  ],
  [
    "key": "content",
    "value": "Chief",
    "type": "text"
  ],
  [
    "key": "options[id]",
    "value": "0",
    "type": "text"
  ],
  [
    "key": "options[title]",
    "value": "Dianna82",
    "type": "text"
  ],
  [
    "key": "options[visible]",
    "value": "true",
    "type": "text"
  ],
  [
    "key": "actions[0][id]",
    "value": "0",
    "type": "text"
  ],
  [
    "key": "actions[0][title]",
    "value": "Margie91",
    "type": "text"
  ],
  [
    "key": "actions[0][visible]",
    "value": "true",
    "type": "text"
  ],
  [
    "key": "actions[1][id]",
    "value": "1",
    "type": "text"
  ],
  [
    "key": "actions[1][title]",
    "value": "Monica80",
    "type": "text"
  ],
  [
    "key": "actions[1][visible]",
    "value": "true",
    "type": "text"
  ],
  [
    "key": "actions[2][id]",
    "value": "2",
    "type": "text"
  ],
  [
    "key": "actions[2][title]",
    "value": "Tia_Crist",
    "type": "text"
  ],
  [
    "key": "actions[2][visible]",
    "value": "false",
    "type": "text"
  ],
  [
    "key": "actions[3][id]",
    "value": "3",
    "type": "text"
  ],
  [
    "key": "actions[3][title]",
    "value": "Eusebio.Langworth15",
    "type": "text"
  ],
  [
    "key": "actions[3][visible]",
    "value": "false",
    "type": "text"
  ],
  [
    "key": "locationStatic[type]",
    "value": "Point",
    "type": "text"
  ],
  [
    "key": "locationStatic[coordinates]",
    "value": "78.444223",
    "type": "text"
  ],
  [
    "key": "locationStatic[coordinates]",
    "value": "17.407332",
    "type": "text"
  ],
  [
    "key": "photo",
    "src": "/path/to/file",
    "type": "file"
  ],
  [
    "key": "photo",
    "src": "/path/to/file",
    "type": "file"
  ]] as [[String : Any]]

let boundary = "Boundary-\(UUID().uuidString)"
var body = ""
var error: Error? = nil
for param in parameters {
  if param["disabled"] == nil {
    let paramName = param["key"]!
    body += "--\(boundary)\r\n"
    body += "Content-Disposition:form-data; name=\"\(paramName)\""
    let paramType = param["type"] as! String
    if paramType == "text" {
      let paramValue = param["value"] as! String
      body += "\r\n\r\n\(paramValue)\r\n"
    } else {
      let paramSrc = param["src"] as! String
      let fileData = try NSData(contentsOfFile:paramSrc, options:[]) as Data
      let fileContent = String(data: fileData, encoding: .utf8)!
      body += "; filename=\"\(paramSrc)\"\r\n"
        + "Content-Type: \"content-type header\"\r\n\r\n\(fileContent)\r\n"
    }
  }
}
body += "--\(boundary)--\r\n";
let postData = body.data(using: .utf8)

var request = URLRequest(url: URL(string: "https://osos-testing.herokuapp.com/api/post")!,timeoutInterval: Double.infinity)
request.addValue("Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlNTExODkwZTkzYmU4MWNiMWYyZGNkNyIsImlhdCI6MTU4MjUyMDcxNCwiZXhwIjoxNTkwMjk2NzE0fQ.K4GhUyLWf9w0Z_cjmnRz5Jka-fDRPgyOGiukz-lIt1c", forHTTPHeaderField: "Authorization")
request.addValue("PostmanRuntime/7.22.0", forHTTPHeaderField: "User-Agent")
request.addValue("*/*", forHTTPHeaderField: "Accept")
request.addValue("no-cache", forHTTPHeaderField: "Cache-Control")
request.addValue("c70ad50c-453e-4602-8bde-0dc5e21d84d7", forHTTPHeaderField: "Postman-Token")
request.addValue("osos-testing.herokuapp.com", forHTTPHeaderField: "Host")
request.addValue("multipart/form-data; boundary=--------------------------469735281676719951993859", forHTTPHeaderField: "Content-Type")
request.addValue("gzip, deflate, br", forHTTPHeaderField: "Accept-Encoding")
request.addValue("jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlNTExODkwZTkzYmU4MWNiMWYyZGNkNyIsImlhdCI6MTU4MjUyMDcxNCwiZXhwIjoxNTkwMjk2NzE0fQ.K4GhUyLWf9w0Z_cjmnRz5Jka-fDRPgyOGiukz-lIt1c", forHTTPHeaderField: "Cookie")
request.addValue("3383", forHTTPHeaderField: "Content-Length")
request.addValue("keep-alive", forHTTPHeaderField: "Connection")
request.addValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")

request.httpMethod = "POST"
request.httpBody = postData

let task = URLSession.shared.dataTask(with: request) { data, response, error in
  guard let data = data else {
    print(String(describing: error))
    return
  }
  print(String(data: data, encoding: .utf8)!)
  semaphore.signal()
}

task.resume()
semaphore.wait()
